[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() {
    int bt[20], wt[20], tat[20], i, n;
    float wtavg, tatavg;

    printf("\nEnter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("\nEnter Burst Time for Process %d: ", i);
        scanf("%d", &bt[i]);
    }

    wt[0] = 0;  // First process has no waiting time
    wtavg = 0;
    tat[0] = bt[0];
    tatavg = tat[0];

    // Calculate Waiting Time and Turnaround Time
    for (i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1]; // Waiting time is sum of previous burst times
        tat[i] = bt[i] + wt[i]; // Turnaround time = Burst Time + Waiting Time
        wtavg += wt[i];
        tatavg += tat[i];
    }

    // Displaying the results
    printf("\n\tPROCESS\t\tBURST TIME\tWAITING TIME\tTURNAROUND TIME\n");
    for (i = 0; i < n; i++) {
        printf("\n\tP%d\t\t%d\t\t%d\t\t%d", i, bt[i], wt[i], tat[i]);
    }

    // Displaying the averages
    printf("\n\nAverage Waiting Time: %.2f", wtavg / n);
    printf("\nAverage Turnaround Time: %.2f\n", tatavg / n);

    return 0;
}
[29/03, 12:34 pm] Devii♥️: Fcfs
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() { int p[20], bt[20], wt[20], tat[20], i, k, n, temp; float wtavg, tatavg;

printf("\nEnter the number of processes: ");
scanf("%d", &n);

for (i = 0; i < n; i++) {
    p[i] = i;
    printf("Enter Burst Time for Process %d: ", i);
    scanf("%d", &bt[i]);
}

// Sorting processes based on burst time using Bubble Sort
for (i = 0; i < n - 1; i++) {
    for (k = i + 1; k < n; k++) {
        if (bt[i] > bt[k]) {
            temp = bt[i];
            bt[i] = bt[k];
            bt[k] = temp;
            
            temp = p[i];
            p[i] = p[k];
            p[k] = temp;
        }
    }
}

wt[0] = 0;
wtavg = 0;
tat[0] = bt[0];
tatavg = tat[0];

for (i = 1; i < n; i++) {
    wt[i] = wt[i - 1] + bt[i - 1];
    tat[i] = wt[i] + bt[i];
    wtavg += wt[i];
    tatavg += tat[i];
}

printf("\n\tPROCESS\tBURST TIME\tWAITING TIME\tTURNAROUND TIME\n");
for (i = 0; i < n; i++) {
    printf("\tP%d\t\t%d\t\t%d\t\t%d\n", p[i], bt[i], wt[i], tat[i]);
}

printf("\nAverage Waiting Time: %.2f", wtavg / n);
printf("\nAverage Turnaround Time: %.2f\n", tatavg / n);

return 0;

}
[29/03, 12:34 pm] Devii♥️: Sjf
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() { int i, j, n, bu[10], wa[10], tat[10], t, ct[10], max; float awt = 0, att = 0, temp = 0;

printf("Enter the number of processes: ");
scanf("%d", &n);

for (i = 0; i < n; i++) {
    printf("\nEnter Burst Time for process %d: ", i + 1);
    scanf("%d", &bu[i]);
    ct[i] = bu[i];
}

printf("\nEnter the size of time slice: ");
scanf("%d", &t);

max = bu[0];
for (i = 1; i < n; i++) {
    if (max < bu[i])
        max = bu[i];
}

for (j = 0; j < (max / t) + 1; j++) {
    for (i = 0; i < n; i++) {
        if (bu[i] != 0) {
            if (bu[i] <= t) {
                tat[i] = temp + bu[i];
                temp = temp + bu[i];
                bu[i] = 0;
            } else {
                bu[i] = bu[i] - t;
                temp = temp + t;
            }
        }
    }
}

for (i = 0; i < n; i++) {
    wa[i] = tat[i] - ct[i];
    att += tat[i];
    awt += wa[i];
}

printf("\nThe Average Turnaround Time is: %.2f", att / n);
printf("\nThe Average Waiting Time is: %.2f\n", awt / n);
printf("\n\tPROCESS\tBURST TIME\tWAITING TIME\tTURNAROUND TIME\n");

for (i = 0; i < n; i++) {
    printf("\t%d\t%d\t\t%d\t\t%d\n", i + 1, ct[i], wa[i], tat[i]);
}

return 0;

}
[29/03, 12:34 pm] Devii♥️: Round robin
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() {
    int p[20], bt[20], pri[20], wt[20], tat[20], i, j, n, temp;
    float wtavg = 0, tatavg = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input Burst Time & Priority
    for (i = 0; i < n; i++) {
        p[i] = i + 1; // Process ID starting from 1
        printf("Enter Burst Time & Priority of Process %d: ", p[i]);
        scanf("%d %d", &bt[i], &pri[i]);
    }

    // Sorting based on Priority (Lower value = Higher priority)
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (pri[i] > pri[j]) {
                // Swap process ID
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;

                // Swap Burst Time
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;

                // Swap Priority
                temp = pri[i];
                pri[i] = pri[j];
                pri[j] = temp;
            }
        }
    }

    // Waiting Time & Turnaround Time Calculation
    wt[0] = 0;
    tat[0] = bt[0];
    wtavg = 0;
    tatavg = tat[0];

    for (i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
        tat[i] = wt[i] + bt[i];

        wtavg += wt[i];
        tatavg += tat[i];
    }

    // Display Results
    printf("\nPROCESS\tPRIORITY\tBURST TIME\tWAITING TIME\tTURNAROUND TIME");
    for (i = 0; i < n; i++) {
        printf("\n%d\t%d\t\t%d\t\t%d\t\t%d", p[i], pri[i], bt[i], wt[i], tat[i]);
    }

    printf("\n\nAverage Waiting Time: %.2f", wtavg / n);
    printf("\nAverage Turnaround Time: %.2f\n", tatavg / n);

    return 0;
}
[29/03, 12:34 pm] Devii♥️: Priority
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() {
    int i, j, k, f, pf = 0, rs[25], m[10], n;
    int next_replace = 0;  // Track next frame to be replaced

    printf("\nEnter the length of reference string: ");
    scanf("%d", &n);

    printf("\nEnter the reference string: ");
    for (i = 0; i < n; i++)
        scanf("%d", &rs[i]);

    printf("\nEnter the number of frames: ");
    scanf("%d", &f);

    // Initialize frames to -1 (empty)
    for (i = 0; i < f; i++)
        m[i] = -1;

    printf("\nThe Page Replacement Process is:\n");

    for (i = 0; i < n; i++) {
        int found = 0;

        // Check if the page is already in frames
        for (k = 0; k < f; k++) {
            if (m[k] == rs[i]) {
                found = 1;
                break;
            }
        }

        // If page fault occurs
        if (!found) {
            m[next_replace] = rs[i];  // Replace the page using FIFO
            next_replace = (next_replace + 1) % f;  // Move to next frame
            pf++;  // Increase page fault count
        }

        // Print current frame status
        for (j = 0; j < f; j++)
            printf("\t%d", (m[j] == -1) ? -1 : m[j]);

        if (!found)
            printf("\tPF No. %d", pf);

        printf("\n");
    }

    printf("\nThe number of Page Faults using FIFO are %d\n", pf);
    return 0;
}
[29/03, 12:34 pm] Devii♥️: Fifo pagere
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() {
    int i, j, min, rs[25], m[10], count[10], flag[25], n, f, pf = 0, next = 1;

    printf("Enter the length of reference string: ");
    scanf("%d", &n);

    printf("Enter the reference string: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &rs[i]);
        flag[i] = 0;
    }

    printf("Enter the number of frames: ");
    scanf("%d", &f);

    for (i = 0; i < f; i++) {
        count[i] = 0;
        m[i] = -1;
    }

    printf("\nThe Page Replacement process is:\n");
    for (i = 0; i < n; i++) {
        flag[i] = 0; // Reset flag for each reference
        for (j = 0; j < f; j++) {
            if (m[j] == rs[i]) { // Page hit
                flag[i] = 1;
                count[j] = next++;
                break;
            }
        }

        if (flag[i] == 0) { // Page fault
            if (i < f) { // Fill empty frames first
                m[i] = rs[i];
                count[i] = next++;
            } else { // Replace using LRU
                min = 0;
                for (j = 1; j < f; j++) {
                    if (count[min] > count[j])
                        min = j;
                }
                m[min] = rs[i];
                count[min] = next++;
            }
            pf++;
        }

        // Print current frame status
        for (j = 0; j < f; j++)
            printf("%d\t", (m[j] == -1) ? -1 : m[j]);
        
        if (flag[i] == 0)
            printf("PF No. -- %d", pf);
        
        printf("\n");
    }

    printf("\nThe number of page faults using LRU are %d\n", pf);
    
    return 0;
}
[29/03, 12:34 pm] Devii♥️: Lru
[29/03, 12:34 pm] Devii♥️: #include <stdio.h>

int main() {
    int n, f, rs[50], m[10], i, j, k, pf = 0;

    // Input number of page references
    printf("\nEnter number of page references -- ");
    scanf("%d", &n);

    // Input reference string
    printf("\nEnter the reference string -- ");
    for (i = 0; i < n; i++)
        scanf("%d", &rs[i]);

    // Input number of frames
    printf("\nEnter the available no. of frames -- ");
    scanf("%d", &f);

    // Initialize frames (m[]) to -1 (empty)
    for (i = 0; i < f; i++)
        m[i] = -1;

    printf("\nThe Page Replacement Process is:\n");

    for (i = 0; i < n; i++) {
        int flag = 0, pos = -1, farthest = i + 1;

        // Check if page is already in frames
        for (j = 0; j < f; j++) {
            if (m[j] == rs[i]) {
                flag = 1;
                break;
            }
            if (m[j] == -1)  // Find an empty frame
                pos = j;
        }

        // If page is not in frames, perform replacement
        if (!flag) {
            if (pos == -1) {  // If no empty frame, find the optimal replacement
                for (j = 0; j < f; j++) {
                    for (k = i + 1; k < n; k++) {
                        if (m[j] == rs[k]) {
                            if (k > farthest) {
                                farthest = k;
                                pos = j;
                            }
                            break;
                        }
                    }
                    if (k == n) {  // If page is never used again, replace it
                        pos = j;
                        break;
                    }
                }
            }
            m[pos] = rs[i];  // Replace the page
            pf++;  // Increment page fault count
        }

        // Print the frame contents
        for (j = 0; j < f; j++)
            printf("%d\t", m[j] != -1 ? m[j] : -1);

        if (!flag)
            printf("PF No. %d", pf);

        printf("\n");
    }

    printf("\nTotal number of page faults -- %d\n", pf);
    return 0;
}
[29/03, 12:35 pm] Devii♥️: Optimal
